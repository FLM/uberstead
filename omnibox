#!/usr/bin/env php
<?php
use Symfony\Component\Console\Application;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\Event\ConsoleTerminateEvent;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Omnibox\Command\BaseCommand;
use Omnibox\DependencyInjection\Container;
use Omnibox\Service\ConfigManager;
use Omnibox\Service\SiteManager;
use Omnibox\Service\VagrantManager;
use Omnibox\Helper\ProcessHelper;
use Omnibox\Helper\QuestionHelper;
use Omnibox\Helper\CliHelper;

set_time_limit(0);
require_once "vendor/autoload.php";

/*
 * Setup Container
 */
$container = new Container();

$container['parameters'] = function ($c) {
    return array(
        'path_to_hosts_file' => '/etc/hosts',
        'path_to_exports_file' => '/etc/exports',
        'path_to_public_key_file' => $_SERVER['HOME'].'/.ssh/id_rsa.pub',
        'system_user' => get_current_user(),
        'path_to_config_file' => 'omnibox.yaml',
        'default_config_values' => array(
            'ip' => '192.168.10.10',
            'memory' => '2048',
            'cpus' => '1',
            'defaultfoldertype' => 'nfs',
            'authorize' => '~/.ssh/id_rsa.pub',
            'keys' => array('~/.ssh/id_rsa'),
            'sites' => array(),
        )
    );
};

$container['cli_helper'] = function ($c) {
    return new CliHelper();
};

$container['config_manager'] = function ($c) {
    return new ConfigManager($c['parameters'], $c['cli_helper']);
};

$container['vagrant_manager'] = function ($c) {
    return new VagrantManager($c['parameters'], $c['cli_helper'], $c['config_manager']);
};

$container['site_manager'] = function ($c) {
    return new SiteManager($c['cli_helper'], $c['vagrant_manager'], $c['config_manager']);
};

/*
 * Setup event dispatcher
 */
$dispatcher = new EventDispatcher();
$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) use ($container) {
        /** @var BaseCommand $command */
        $command = $event->getCommand();

        /** @var CliHelper $ch */
        $ch = $container['cli_helper'];
        $ch->setHelperset($command->getHelperSet());
        $ch->setInputInterface($event->getInput());
        $ch->setOutputInterface($event->getOutput());

        if (method_exists($command, 'getRequiresSudo') && $command->getRequiresRootAccess() === true && posix_getuid() != 0) {
            $event->getOutput()->writeln('This command needs access to /etc/hosts and /etc/exports. Please run as root (sudo).');
            die();
        }

        if (!file_exists($container->getParameter('path_to_public_key_file'))) {
            $event->getOutput()->writeln('It seems like you don\'t have any SSH keys. Run <question>ssh-keygen -t rsa -C "your_email@example.com"</question> to generate keys.');
            die();
        }

        if ($command instanceof BaseCommand) {
            if (method_exists($command, 'setContainer')) {
                $command->setContainer($container);
            }

            // Re-create config if config file isn't valid, or create config if config command han been executed
            /** @var ConfigManager $cm */
            /** @var VagrantManager $vm */
            $cm = $container['config_manager'];
            $vm = $container['vagrant_manager'];
            if (!$cm->configIsValid() || $command->getName() === "config") {
                $cm->updateConfig();
                $vm->provision();
                $vm->reload();
            }
        }
    });

$dispatcher->addListener(ConsoleEvents::TERMINATE, function (ConsoleTerminateEvent $event) use ($container) {
        $container->getVagrantManager()->executeCommands();
        $command = $event->getCommand();
        if ($command instanceof BaseCommand) {
            if ($command->getCommandForTerminateEvent() !== null) {
                exec($command->getCommandForTerminateEvent());
            }
        }
    });

/*
 * Load Commands
 */
$finder = new Finder();
$commandFiles = $finder->files()
    ->name('*Command.php')
    ->notName('*BaseCommand.php')
    ->in('src')
;

$commands = array();
foreach ($commandFiles as $file) {
    if (preg_match('#^namespace\s+(.+?);.*class\s+(\w+).+;$#sm', $file->getContents(), $m)) {
        $class = $m[1].'\\'.$m[2];
        $object = new $class();
        if ($object instanceof Command) {
            $commands[] = $object;
        }
    }
}

//---------------------------
// Run Application
//---------------------------
$console = new Application();
$console->setDispatcher($dispatcher);
$console->addCommands($commands);
$console->run();
