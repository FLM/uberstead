#!/usr/bin/env php
<?php
use Symfony\Component\Console\Application;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Console\Command\Command;
use Uberstead\Command\BaseCommand;
use Uberstead\Container\Container;
use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Uberstead\Service\ConfigManager;
use Uberstead\Service\SiteManager;
use Uberstead\Service\Validator;
use Symfony\Component\Console\Event\ConsoleTerminateEvent;
use Uberstead\Service\VagrantManager;
use Uberstead\Helper\ProcessHelper;

set_time_limit(0);
require_once "vendor/autoload.php";

/*
 * Setup Container
 */
$container = new Container();

$parameters = array(
    'path_to_hosts_file' => '/etc/hosts',
    'path_to_exports_file' => '/etc/exports',
    'path_to_public_key_file' => $_SERVER['HOME'].'/.ssh/id_rsa.pub',
    'system_user' => get_current_user(),
    'path_to_config_file' => 'uberstead.yaml',
    'default_config_values' => array(
        'ip' => '192.168.10.10',
        'memory' => '2048',
        'cpus' => '1',
        'defaultfoldertype' => 'nfs',
        'authorize' => '~/.ssh/id_rsa.pub',
        'keys' => array('~/.ssh/id_rsa'),
        'sites' => array(),
    )
);

$container['parameters'] = $parameters;
$container['config_manager'] = new ConfigManager();
$container['validator'] = new Validator();
$container['site_manager'] = new SiteManager();
$container['vagrant_manager'] = new VagrantManager();
$container['process_helper'] = new ProcessHelper();
$container->populateCointainerAwareServices();

/*
 * Load Commands
 */
$finder = new Finder();
$commandFiles = $finder->files()
    ->name('*Command.php')
    ->notName('*BaseCommand.php')
    ->in('src')
;

/*
 * Setup event dispatcher
 */
$dispatcher = new EventDispatcher();
$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) use ($container) {
        /** @var BaseCommand $command */
        $input = $event->getInput();
        $output = $event->getOutput();
        $command = $event->getCommand();

        $container['output_interface'] = $output;
        $container['input_interface'] = $input;
        $container['helper_set'] = $command->getHelperSet();

        if (posix_getuid() != 0) {
            $output->writeln('This command needs access to /etc/hosts and /etc/exports. Please run as root (sudo).');
            die();
        }

        if (!file_exists($container->getParameter('path_to_public_key_file'))) {
            $output->writeln('It seems like you don\'t have any SSH keys. Run <question>ssh-keygen -t rsa -C "your_email@example.com"</question> to generate keys.');
            die();
        }

        if ($command instanceof BaseCommand) {
            // Run update config of config file isn't valid, or config command han been executed
            if (!$container->getConfigManager()->configIsValid() || $command->getName() === "uberstead:settings") {
                $container->getConfigManager()->updateConfig();
                $container->getVagrantManager()->provision();
                $container->getVagrantManager()->reload();
            }
        }
    });

$dispatcher->addListener(ConsoleEvents::TERMINATE, function (ConsoleTerminateEvent $event) use ($container) {
        $container->getVagrantManager()->executeCommands();
        $command = $event->getCommand();
        if ($command instanceof BaseCommand) {
            if ($command->getCommandForTerminateEvent() !== null) {
                exec($command->getCommandForTerminateEvent());
            }
        }
    });


$commands = array();
foreach ($commandFiles as $file) {
    if (preg_match('#^namespace\s+(.+?);.*class\s+(\w+).+;$#sm', $file->getContents(), $m)) {
        $class = $m[1].'\\'.$m[2];
        $object = new $class();
        if ($object instanceof Command) {
            $commands[] = $object;
            if (method_exists($object, 'setContainer')) {
                $object->setContainer($container);
            }
        }
    }
}

//---------------------------
// Run Application
//---------------------------
$console = new Application();
$console->setDispatcher($dispatcher);
$console->addCommands($commands);
$console->run();
