#!/usr/bin/env php
<?php
use Symfony\Component\Console\Application;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Console\Command\Command;
use Uberstead\Command\BaseCommand;
use Uberstead\Container\Container;
use Uberstead\Service\ValidatorService;
use Symfony\Component\Console\Event\ConsoleCommandEvent;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Uberstead\Service\ConfigManagerService;
use Uberstead\Service\SiteManagerService;

set_time_limit(0);
require_once "vendor/autoload.php";

/*
 * Setup Container
 */
$container = new Container();
$container['config_manager'] = new ConfigManagerService();
$container['validator'] = new ValidatorService($container['config_manager']);
$container['provision_service'] = new \Uberstead\Service\ProvisionService($container['config_manager']);
$container['site_manager'] = new SiteManagerService($container['config_manager'], $container['validator']);

/*
 * Load Commands
 */
$finder = new Finder();
$commandFiles = $finder->files()
    ->name('*Command.php')
    ->notName('*BaseCommand.php')
    ->in('src')
;

/*
 * Setup event dispatcher
 */
$dispatcher = new EventDispatcher();
$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) {
        $input = $event->getInput();
        $output = $event->getOutput();

        if (posix_getuid() != 0) {
            $output->writeln('This command needs access to /etc/hosts and /etc/exports. Please run as root (sudo).');
            die();
        }

        /** @var BaseCommand $command */
        $command = $event->getCommand();
        if ($command instanceof BaseCommand) {
            $command->getContainer()->getConfigManager()->checkConfig($input, $output);
        }
    });


$commands = array();
foreach ($commandFiles as $file) {
    if (preg_match('#^namespace\s+(.+?);.*class\s+(\w+).+;$#sm', $file->getContents(), $m)) {
        $class = $m[1].'\\'.$m[2];
        $object = new $class();
        if ($object instanceof Command) {
            $commands[] = $object;
            if (method_exists($object, 'setContainer')) {
                $object->setContainer($container);
            }
        }
    }
}

//---------------------------
// Run Application
//---------------------------
$console = new Application();
$console->setDispatcher($dispatcher);
$console->addCommands($commands);
$console->run();
